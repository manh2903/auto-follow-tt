package com.tiktok.util;

import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.options.UiAutomator2Options;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.PointerInput;
import org.openqa.selenium.interactions.Sequence;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class DeviceConnector {
    private static final String TIKTOK_PACKAGE = "com.ss.android.ugc.trill";
    private static final String TIKTOK_ACTIVITY = "com.ss.android.ugc.trill.splash.SplashActivity";
    private static final String TIKTOK_MAIN_ACTIVITY = "com.ss.android.ugc.aweme.main.MainActivity";

    // Static map ƒë·ªÉ qu·∫£n l√Ω port cho t·ª´ng thi·∫øt b·ªã
    private static final Map<String, Integer> DEVICE_PORTS = new ConcurrentHashMap<>();
    private static int nextPort = 8200;

    private AndroidDriver driver;
    private String deviceId;
    private boolean isConnected = false;
    private LogCallback logCallback;

    public DeviceConnector(String deviceId) {
        this.deviceId = deviceId;
    }

    public void setLogCallback(LogCallback callback) {
        this.logCallback = callback;
    }

    private void log(String message) {
        if (logCallback != null) {
            logCallback.log(message);
        }
    }

    public static List<String> getAllDevices() {
        List<String> devices = new ArrayList<>();
        try {
            Process process = Runtime.getRuntime().exec("adb devices");
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));
            String line;
            boolean isFirstLine = true;
            while ((line = reader.readLine()) != null) {
                if (isFirstLine) {
                    isFirstLine = false;
                    continue;
                }
                if (line.contains("device") && !line.startsWith("List")) {
                    String id = line.split("\\s+")[0];
                    devices.add(id);
                }
            }
            if (devices.isEmpty()) {
                System.err.println("Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã Android n√†o!");
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã: " + e.getMessage());
        }
        return devices;
    }

    public void connect() {
        try {
            String udid = deviceId;
            if (udid == null) {
                log("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã Android n√†o! H√£y ki·ªÉm tra l·∫°i k·∫øt n·ªëi ADB.");
                return;
            }

            log("=== B·∫ÆT ƒê·∫¶U K·∫æT N·ªêI THI·∫æT B·ªä: " + udid + " ===");

            // B∆∞·ªõc 1: Validate thi·∫øt b·ªã tr∆∞·ªõc khi k·∫øt n·ªëi
            if (!validateDevice(udid)) {
                log("‚ùå Thi·∫øt b·ªã " + udid + " kh√¥ng h·ª£p l·ªá, b·ªè qua");
                return;
            }

            // B∆∞·ªõc 2: Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt
            if (!checkDeviceRequirements(udid)) {
                return;
            }

            // B∆∞·ªõc 3: Ki·ªÉm tra TikTok m·ªôt c√°ch th√¥ng minh h∆°n
            boolean tiktokInForeground = isTikTokInForeground(udid);
            boolean tiktokRunning = !tiktokInForeground ? isTikTokRunning(udid) : true;

            if (!tiktokInForeground) {
                if (tiktokRunning) {
                    log("TikTok ƒëang ch·∫°y background, ƒë∆∞a v·ªÅ foreground...");
                    bringTikTokToForeground(udid);
                } else {
                    log("TikTok ch∆∞a ch·∫°y, ƒëang m·ªü ·ª©ng d·ª•ng...");
                    openTikTok(udid);
                }
            } else {
                log("‚úÖ TikTok ƒë√£ ·ªü foreground, kh√¥ng c·∫ßn m·ªü l·∫°i");
            }

            // B∆∞·ªõc 4: Chu·∫©n b·ªã k·∫øt n·ªëi
            int systemPort = getSystemPortForDevice(udid);
            cleanupPort(systemPort);

            // B∆∞·ªõc 5: N·∫øu l√† thi·∫øt b·ªã USB v√† ƒë√£ validate th·∫•t b·∫°i tr∆∞·ªõc ƒë√≥, th·ª≠ restart ADB
            boolean isUSBDevice = !udid.contains(":");
            if (isUSBDevice) {
                log("Ph√°t hi·ªán thi·∫øt b·ªã USB, th·ª±c hi·ªán c√°c b∆∞·ªõc chu·∫©n b·ªã ƒë·∫∑c bi·ªát...");
                if (!canStartUIAutomator2(udid)) {
                    restartAdbForDevice(udid);
                    // Validate l·∫°i sau khi restart
                    if (!validateDevice(udid)) {
                        log("‚ùå Thi·∫øt b·ªã USB " + udid + " v·∫´n kh√¥ng ·ªïn ƒë·ªãnh sau restart");
                        return;
                    }
                }
            }

            // B∆∞·ªõc 6: T·∫°o options v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
            UiAutomator2Options options = createOptimizedOptions(udid, systemPort);

            // B∆∞·ªõc 7: Th·ª≠ k·∫øt n·ªëi v·ªõi retry logic c·∫£i ti·∫øn
            log("ƒêang k·∫øt n·ªëi t·ªõi Appium server v·ªõi port " + systemPort + "...");

            int maxRetries = isUSBDevice ? 6 : 4; // USB device c·∫ßn nhi·ªÅu l·∫ßn th·ª≠ h∆°n
            int retryCount = 0;
            Exception lastException = null;

            while (retryCount < maxRetries) {
                try {
                    driver = new AndroidDriver(new URL("http://127.0.0.1:4723"), options);
                    isConnected = true;
                    log("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi thi·∫øt b·ªã " + udid);

                    // Test connection b·∫±ng c√°ch l·∫•y package hi·ªán t·∫°i
                    String currentPackage = driver.getCurrentPackage();
                    log("Package hi·ªán t·∫°i: " + currentPackage);

                    // ƒê·∫£m b·∫£o TikTok ƒëang ƒë∆∞·ª£c focus (ch·ªâ khi c·∫ßn thi·∫øt)
                    if (!TIKTOK_PACKAGE.equals(currentPackage)) {
                        log("ƒêang chuy·ªÉn focus v·ªÅ TikTok...");
                        bringTikTokToForeground(udid);
                        safeSleep(2000);
                    }

                    return;

                } catch (Exception e) {
                    lastException = e;
                    retryCount++;

                    log(String.format("‚ùå L·∫ßn th·ª≠ %d/%d th·∫•t b·∫°i cho thi·∫øt b·ªã %s",
                            retryCount, maxRetries, udid));
                    log("L·ªói: " + e.getMessage());

                    if (retryCount < maxRetries) {
                        // TƒÉng th·ªùi gian delay theo t·ª´ng l·∫ßn th·ª≠
                        long delay = 3000 + (2000 * retryCount);
                        log("‚è≥ ƒê·ª£i " + delay + "ms tr∆∞·ªõc khi th·ª≠ l·∫°i...");
                        Thread.sleep(delay);

                        // C√°c b∆∞·ªõc kh·∫Øc ph·ª•c theo l·∫ßn th·ª≠
                        if (retryCount == 2) {
                            log("üîÑ Th·ª±c hi·ªán cleanup UIAutomator2...");
                            canStartUIAutomator2(udid);
                        } else if (retryCount == 3 && isUSBDevice) {
                            log("üîÑ Restart ADB cho thi·∫øt b·ªã USB...");
                            restartAdbForDevice(udid);
                        } else if (retryCount == 4) {
                            // Th·ª≠ port kh√°c
                            systemPort = getSystemPortForDevice(udid + "_retry");
                            options.setSystemPort(systemPort);
                            log("üîÑ Th·ª≠ port m·ªõi: " + systemPort);
                        }
                    }
                }
            }

            // N·∫øu h·∫øt l·∫ßn th·ª≠
            log("‚ùå KH√îNG TH·ªÇ K·∫æT N·ªêI v·ªõi thi·∫øt b·ªã " + udid + " sau " + maxRetries + " l·∫ßn th·ª≠");
            printDetailedError(lastException, udid, isUSBDevice);

        } catch (Exception e) {
            log("=== L·ªñI NGHI√äM TR·ªåNG KHI K·∫æT N·ªêI THI·∫æT B·ªä ===");
            log("Chi ti·∫øt l·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // H√†m ki·ªÉm tra nhanh TikTok c√≥ ·ªü foreground kh√¥ng
    private boolean isTikTokInForeground(String udid) {
        try {
            log("ƒêang ki·ªÉm tra TikTok foreground...");

            // L·ªánh ƒë∆°n gi·∫£n v√† nhanh ƒë·ªÉ ki·ªÉm tra app hi·ªán t·∫°i
            Process process = Runtime.getRuntime().exec("adb -s " + udid + " shell dumpsys window windows | grep -E 'mCurrentFocus'");
            process.waitFor();

            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = reader.readLine();

            if (line != null && line.contains(TIKTOK_PACKAGE)) {
                log("‚úÖ TikTok ƒëang ·ªü foreground: " + line.trim());
                return true;
            }

            // Ki·ªÉm tra th√™m b·∫±ng focused activity
            process = Runtime.getRuntime().exec("adb -s " + udid + " shell dumpsys activity activities | grep -E 'mCurrentFocus|mFocusedActivity'");
            process.waitFor();

            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if (line.contains(TIKTOK_PACKAGE)) {
                    log("‚úÖ TikTok c√≥ focused activity: " + line.trim());
                    return true;
                }
            }

            return false;
        } catch (Exception e) {
            log("L·ªói ki·ªÉm tra foreground: " + e.getMessage());
            return false;
        }
    }

    // H√†m ki·ªÉm tra chi ti·∫øt tr·∫°ng th√°i TikTok
    private boolean isTikTokRunning(String udid) {
        try {
            log("ƒêang ki·ªÉm tra tr·∫°ng th√°i TikTok chi ti·∫øt...");

            // Ph∆∞∆°ng ph√°p 1: Ki·ªÉm tra running processes
            Process process = Runtime.getRuntime().exec("adb -s " + udid + " shell ps | grep " + TIKTOK_PACKAGE);
            process.waitFor();

            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String processLine = reader.readLine();

            if (processLine != null && processLine.contains(TIKTOK_PACKAGE)) {
                log("TikTok process ƒëang ch·∫°y: " + processLine.trim());

                // Ki·ªÉm tra xem c√≥ ph·∫£i l√† background process kh√¥ng
                if (processLine.contains("S") || processLine.contains("R")) {
                    // Ki·ªÉm tra th√™m b·∫±ng c√°ch xem package c√≥ trong activity stack kh√¥ng
                    process = Runtime.getRuntime().exec("adb -s " + udid + " shell dumpsys activity activities | grep -A 20 'Running activities'");
                    process.waitFor();

                    reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        if (line.contains(TIKTOK_PACKAGE)) {
                            if (line.contains("state=RESUMED")) {
                                log("‚úÖ TikTok trong RESUMED state");
                                return true;
                            } else if (line.contains("state=PAUSED") || line.contains("state=STOPPED")) {
                                log("TikTok ƒëang ch·∫°y nh∆∞ng ·ªü background (PAUSED/STOPPED)");
                                return true; // V·∫´n coi l√† ƒëang ch·∫°y
                            }
                        }
                    }

                    log("TikTok ƒëang ch·∫°y background");
                    return true;
                }
            }

            // Ph∆∞∆°ng ph√°p 2: Ki·ªÉm tra recent tasks
            process = Runtime.getRuntime().exec("adb -s " + udid + " shell dumpsys activity recents | grep " + TIKTOK_PACKAGE);
            process.waitFor();
            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String recentTask = reader.readLine();

            if (recentTask != null && recentTask.contains(TIKTOK_PACKAGE)) {
                log("TikTok c√≥ trong recent tasks nh∆∞ng c√≥ th·ªÉ kh√¥ng active");
                return false; // C√≥ trong recent nh∆∞ng ch∆∞a ch·∫Øc ƒëang ch·∫°y
            }

            log("‚ùå TikTok kh√¥ng ƒëang ch·∫°y");
            return false;

        } catch (Exception e) {
            log("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i TikTok: " + e.getMessage());
            return false;
        }
    }

    // H√†m m·ªõi ƒë·ªÉ ƒë∆∞a TikTok v·ªÅ foreground thay v√¨ m·ªü l·∫°i
    private boolean bringTikTokToForeground(String udid) {
        try {
            log("ƒêang ƒë∆∞a TikTok v·ªÅ foreground...");

            // S·ª≠ d·ª•ng intent ƒë·ªÉ ƒë∆∞a app v·ªÅ foreground (kh√¥ng restart)
            String command = "adb -s " + udid + " shell am start -S -n " + TIKTOK_PACKAGE + "/" + TIKTOK_MAIN_ACTIVITY;
            Process process = Runtime.getRuntime().exec(command);
            int exitCode = process.waitFor();

            if (exitCode == 0) {
                log("‚úÖ ƒê√£ g·ª≠i l·ªánh ƒë∆∞a TikTok v·ªÅ foreground");
                safeSleep(2000); // ƒê·ª£i ng·∫Øn h∆°n v√¨ app ƒë√£ ch·∫°y r·ªìi

                // Ki·ªÉm tra xem ƒë√£ v·ªÅ foreground ch∆∞a
                if (isTikTokInForeground(udid)) {
                    log("‚úÖ TikTok ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v·ªÅ foreground th√†nh c√¥ng");
                    return true;
                } else {
                    log("‚ö†Ô∏è TikTok ch∆∞a v·ªÅ foreground, th·ª≠ l·∫°i...");
                }
            }

            // Fallback: th·ª≠ m·ªü b·∫±ng c√°ch kh√°c
            log("Th·ª≠ ƒë∆∞a v·ªÅ foreground b·∫±ng launcher intent...");
            command = "adb -s " + udid + " shell am start -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -n " + TIKTOK_PACKAGE + "/" + TIKTOK_MAIN_ACTIVITY;
            process = Runtime.getRuntime().exec(command);
            process.waitFor();
            safeSleep(2000);

            return isTikTokInForeground(udid);

        } catch (Exception e) {
            log("‚ùå L·ªói khi ƒë∆∞a TikTok v·ªÅ foreground: " + e.getMessage());
            return false;
        }
    }

    private boolean openTikTok(String udid) {
        try {
            log("ƒêang m·ªü TikTok b·∫±ng l·ªánh ADB...");

            // S·ª≠ d·ª•ng l·ªánh am start ƒë·ªÉ m·ªü TikTok v·ªõi main activity
            String command = "adb -s " + udid + " shell am start -n " + TIKTOK_PACKAGE + "/" + TIKTOK_MAIN_ACTIVITY;
            Process process = Runtime.getRuntime().exec(command);
            int exitCode = process.waitFor();

            if (exitCode == 0) {
                log("‚úÖ ƒê√£ g·ª≠i l·ªánh m·ªü TikTok th√†nh c√¥ng");

                // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
                safeSleep(5000);

                // Ki·ªÉm tra xem TikTok ƒë√£ m·ªü ch∆∞a
                boolean isOpened = isTikTokInForeground(udid);
                if (isOpened) {
                    log("‚úÖ TikTok ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng");
                    return true;
                } else {
                    log("‚ö†Ô∏è TikTok ƒë√£ ƒë∆∞·ª£c g·ª≠i l·ªánh m·ªü nh∆∞ng ch∆∞a ·ªü foreground");

                    // Th·ª≠ l·ªánh kh√°c v·ªõi splash activity
                    log("Th·ª≠ m·ªü b·∫±ng splash activity...");
                    command = "adb -s " + udid + " shell am start -n " + TIKTOK_PACKAGE + "/" + TIKTOK_ACTIVITY;
                    process = Runtime.getRuntime().exec(command);
                    process.waitFor();
                    safeSleep(3000);

                    return isTikTokInForeground(udid);
                }
            } else {
                // ƒê·ªçc error output
                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
                String errorLine;
                StringBuilder errorMessage = new StringBuilder();
                while ((errorLine = errorReader.readLine()) != null) {
                    errorMessage.append(errorLine).append("\n");
                }

                log("‚ùå L·ªói khi m·ªü TikTok (exit code: " + exitCode + "): " + errorMessage.toString());
                return false;
            }

        } catch (Exception e) {
            log("‚ùå L·ªói khi m·ªü TikTok: " + e.getMessage());
            return false;
        }
    }

    private synchronized int getSystemPortForDevice(String udid) {
        if (!DEVICE_PORTS.containsKey(udid)) {
            DEVICE_PORTS.put(udid, nextPort++);
            log("G√°n port " + (nextPort - 1) + " cho thi·∫øt b·ªã " + udid);
        }
        return DEVICE_PORTS.get(udid);
    }

    private boolean validateDevice(String udid) {
        try {
            log("ƒêang validate thi·∫øt b·ªã: " + udid);

            // Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã
            Process process = Runtime.getRuntime().exec("adb -s " + udid + " shell getprop ro.boot.serialno");
            process.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String serialno = reader.readLine();

            if (serialno == null || serialno.trim().isEmpty()) {
                log("‚ùå Thi·∫øt b·ªã " + udid + " kh√¥ng ph·∫£n h·ªìi getprop");
                return false;
            }

            // Test ADB connection c∆° b·∫£n
            process = Runtime.getRuntime().exec("adb -s " + udid + " shell echo 'test'");
            process.waitFor();
            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String response = reader.readLine();

            if (!"test".equals(response)) {
                log("‚ùå ADB connection kh√¥ng ·ªïn ƒë·ªãnh cho thi·∫øt b·ªã " + udid);
                return false;
            }

            // Ki·ªÉm tra tr·∫°ng th√°i boot
            process = Runtime.getRuntime().exec("adb -s " + udid + " shell getprop sys.boot_completed");
            process.waitFor();
            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String bootCompleted = reader.readLine();

            if (!"1".equals(bootCompleted)) {
                log("‚ùå Thi·∫øt b·ªã " + udid + " ch∆∞a boot ho√†n t·∫•t");
                return false;
            }

            log("‚úÖ Thi·∫øt b·ªã " + udid + " validation th√†nh c√¥ng");
            return true;

        } catch (Exception e) {
            log("‚ùå L·ªói validate thi·∫øt b·ªã " + udid + ": " + e.getMessage());
            return false;
        }
    }

    private void restartAdbForDevice(String udid) {
        try {
            log("Restart ADB connection cho thi·∫øt b·ªã " + udid);

            // N·∫øu l√† WiFi device, disconnect v√† reconnect
            if (udid.contains(":")) {
                Runtime.getRuntime().exec("adb disconnect " + udid).waitFor();
                Thread.sleep(2000);
                Runtime.getRuntime().exec("adb connect " + udid).waitFor();
                Thread.sleep(3000);
            } else {
                // V·ªõi USB device, ch·ªâ restart connection cho thi·∫øt b·ªã c·ª• th·ªÉ
                Runtime.getRuntime().exec("adb -s " + udid + " usb").waitFor();
                Thread.sleep(2000);
                Runtime.getRuntime().exec("adb -s " + udid + " tcpip 5555").waitFor();
                Thread.sleep(2000);
                Runtime.getRuntime().exec("adb -s " + udid + " usb").waitFor();
                Thread.sleep(3000);
            }

        } catch (Exception e) {
            log("‚ùå L·ªói restart ADB: " + e.getMessage());
        }
    }

    private boolean canStartUIAutomator2(String udid) {
        try {
            // Ki·ªÉm tra xem c√≥ process UIAutomator2 n√†o ƒëang ch·∫°y kh√¥ng
            Process process = Runtime.getRuntime().exec("adb -s " + udid + " shell ps | grep uiautomator");
            process.waitFor();

            // Kill existing UIAutomator2 processes
            Runtime.getRuntime().exec("adb -s " + udid + " shell pkill -f uiautomator").waitFor();
            Thread.sleep(1000);

            return true;
        } catch (Exception e) {
            log("‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra UIAutomator2 tr√™n thi·∫øt b·ªã " + udid + ": " + e.getMessage());
            return false;
        }
    }

    private void cleanupPort(int port) {
        try {
            // Ki·ªÉm tra port c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng (Windows)
            Process process = Runtime.getRuntime().exec("netstat -ano | findstr :" + port);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = reader.readLine();

            if (line != null && line.contains(":" + port)) {
                log("Port " + port + " ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng, ƒëang c·ªë g·∫Øng gi·∫£i ph√≥ng...");
                // C√≥ th·ªÉ th√™m logic kill process n·∫øu c·∫ßn
            }
        } catch (Exception e) {
            // Ignore cleanup errors
        }
    }

    private boolean checkDeviceRequirements(String udid) {
        try {
            // Ki·ªÉm tra USB Debugging
            Process process = Runtime.getRuntime().exec("adb -s " + udid + " shell settings get global adb_enabled");
            process.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String adbEnabled = reader.readLine();
            if (!"1".equals(adbEnabled)) {
                log("‚ùå USB Debugging ch∆∞a ƒë∆∞·ª£c b·∫≠t tr√™n thi·∫øt b·ªã " + udid);
                return false;
            }

            // Ki·ªÉm tra m√†n h√¨nh kh√≥a (simplified check)
            process = Runtime.getRuntime().exec("adb -s " + udid + " shell dumpsys power | grep 'Display Power'");
            process.waitFor();
            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String powerState = reader.readLine();
            if (powerState != null && powerState.contains("OFF")) {
                log("‚ùå M√†n h√¨nh thi·∫øt b·ªã " + udid + " ƒëang t·∫Øt");
                return false;
            }

            // Ki·ªÉm tra TikTok
            process = Runtime.getRuntime().exec("adb -s " + udid + " shell pm list packages | grep com.ss.android.ugc.trill");
            process.waitFor();
            reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String tiktokPackage = reader.readLine();

            if (tiktokPackage == null || !tiktokPackage.contains("com.ss.android.ugc.trill")) {
                log("‚ùå TikTok ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n thi·∫øt b·ªã " + udid);
                return false;
            }

            log("‚úÖ TikTok ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n thi·∫øt b·ªã " + udid);
            return true;

        } catch (Exception e) {
            log("‚ùå L·ªói khi ki·ªÉm tra y√™u c·∫ßu thi·∫øt b·ªã " + udid + ": " + e.getMessage());
            return false;
        }
    }

    private void printDetailedError(Exception e, String udid, boolean isUSBDevice) {
        log("\n=== CHI TI·∫æT L·ªñI V√Ä H∆Ø·ªöNG KH·∫ÆC PH·ª§C ===");
        log("Thi·∫øt b·ªã: " + udid + (isUSBDevice ? " (USB)" : " (WiFi)"));
        log("L·ªói cu·ªëi: " + (e != null ? e.getMessage() : "Unknown"));

        log("\nüîç NGUY√äN NH√ÇN C√ì TH·ªÇ:");
        if (isUSBDevice) {
            log("1. C√°p USB kh√¥ng ·ªïn ƒë·ªãnh ho·∫∑c b·ªã l·ªèng");
            log("2. Driver USB thi·∫øt b·ªã ch∆∞a ƒë∆∞·ª£c c√†i ƒë√∫ng");
            log("3. Windows Power Management t·∫Øt USB port");
            log("4. UIAutomator2 kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√™n thi·∫øt b·ªã");
            log("5. Port system b·ªã xung ƒë·ªôt");
        } else {
            log("1. K·∫øt n·ªëi WiFi kh√¥ng ·ªïn ƒë·ªãnh");
            log("2. Thi·∫øt b·ªã t·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi ADB qua WiFi");
            log("3. Firewall ch·∫∑n k·∫øt n·ªëi");
        }

        log("\nüõ†Ô∏è C√ÅCH KH·∫ÆC PH·ª§C:");
        log("1. Kh·ªüi ƒë·ªông l·∫°i Appium server");
        log("2. Ch·∫°y: adb kill-server && adb start-server");
        log("3. Kh·ªüi ƒë·ªông l·∫°i thi·∫øt b·ªã");
        if (isUSBDevice) {
            log("4. Th·ª≠ c√°p USB kh√°c ho·∫∑c c·ªïng USB kh√°c");
            log("5. V√†o Device Manager ki·ªÉm tra driver");
            log("6. T·∫Øt USB selective suspend trong Power Options");
        }
        log("========================\n");
    }

    public boolean isConnected() {
        return isConnected && driver != null;
    }

    public AndroidDriver getDriver() {
        return driver;
    }

    public void close() {
        if (driver != null) {
            try {
                log("üîÑ ƒêang ƒë√≥ng k·∫øt n·ªëi thi·∫øt b·ªã...");
                try {
                    driver.quit();
                } catch (Exception e) {
                    // B·ªè qua l·ªói khi driver ƒë√£ b·ªã ƒë√≥ng
                    log("Driver ƒë√£ ƒë∆∞·ª£c ƒë√≥ng tr∆∞·ªõc ƒë√≥");
                }
                isConnected = false;
                log("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi");
            } catch (Exception e) {
                log("‚ùå L·ªói khi ƒë√≥ng driver: " + e.getMessage());
            } finally {
                driver = null;
            }
        }
    }

    public void safeSleep(long milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log("Ch∆∞∆°ng tr√¨nh ƒëang tho√°t...");
            close();
            System.exit(0);
        }
    }

    private UiAutomator2Options createOptimizedOptions(String udid, int systemPort) {
        boolean isUSBDevice = !udid.contains(":");

        UiAutomator2Options options = new UiAutomator2Options()
                .setDeviceName("Android Device")
                .setUdid(udid)
                .setAppPackage(TIKTOK_PACKAGE)
                .setAppActivity(TIKTOK_ACTIVITY)
                .setSystemPort(systemPort)
                .setNoReset(true)
                .setAutoGrantPermissions(true)
                .setSkipDeviceInitialization(false) // ƒê·ªÉ false cho USB devices
                .setSkipServerInstallation(false)   // ƒê·ªÉ false cho USB devices
                .setNewCommandTimeout(Duration.ofSeconds(120)) // TƒÉng timeout
                .setUiautomator2ServerLaunchTimeout(Duration.ofSeconds(90))
                .setUiautomator2ServerInstallTimeout(Duration.ofSeconds(90))
                .setFullReset(false);

        // C·∫•u h√¨nh ƒë·∫∑c bi·ªát cho USB devices
        if (isUSBDevice) {
            options.setCapability("appium:androidDeviceReadyTimeout", 90000);
            options.setCapability("appium:adbExecTimeout", 90000);
            options.setCapability("appium:androidInstallTimeout", 90000);
        } else {
            options.setCapability("appium:androidDeviceReadyTimeout", 60000);
            options.setCapability("appium:adbExecTimeout", 60000);
            options.setCapability("appium:androidInstallTimeout", 60000);
        }

        // C√°c capabilities chung
        options.setCapability("appium:disableWindowAnimation", true);
        options.setCapability("appium:waitForIdleTimeout", 0);
        options.setCapability("appium:androidDeviceSocket", "tiktok_automation_" + systemPort);
        options.setCapability("appium:ensureWebviewsHavePages", true);
        options.setCapability("appium:webviewDevtoolsPort", 9222 + (systemPort - 8200));
        options.setCapability("appium:dontStopAppOnReset", true);
        options.setCapability("appium:waitForSelectorTimeout", 15000);
        options.setCapability("appium:waitForLaunchTimeout", 90000);
        options.setCapability("appium:networkConnectionEnabled", true);
        options.setCapability("appium:allowTestPackages", true);
        options.setCapability("appium:enforceAppiumPrefix", true);

        return options;
    }
}